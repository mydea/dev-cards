# Dev-Cards Project Rules

Always look at RULES.md for the general game rules, as well as PLAN.md for the development plan.

## Package Management
- Always use `pnpm` for installing dependencies and running scripts
- Use workspace commands: `pnpm --filter <package>` for package-specific operations
- Never use npm or yarn in this project

## TypeScript Guidelines
- Avoid TypeScript enums - use string constants and unions of them instead.
- Use erasable syntax only in TypeScript configurations (no runtime transforms)
- Write ESM code only - no CommonJS output needed
- Prefer `type` over `interface` for simple type definitions
- Use strict TypeScript configuration
- Avoid using `any` at all cost. Instead, make sure to use proper types everywhere.

## Code Style
- Use single quotes for strings
- Trailing commas in multi-line structures
- 2-space indentation
- Semi-colons required
- Prefer arrow functions for callbacks
- Use const assertions (`as const`) instead of enums
- Run `pnpm format` after changing code to ensure code is correctly formatted

## Project Structure
- Workspace packages: `@dev-cards/data`, `@dev-cards/game`, `@dev-cards/api`
- Keep shared types in `@dev-cards/data`
- Use absolute imports where possible
- Organize by feature, not by file type

## Game Development
- Card effects should be stateless and pure functions
- Game state should be immutable (use spread operators for updates)
- Prefer composition over inheritance
- Write comprehensive JSDoc comments for public APIs

## Build and Deployment
- ESM-only builds (no CommonJS)
- Tree-shakable exports
- Cloudflare targets for deployment
- Bundle splitting for performance

## Testing
- Use Vitest for testing
- Test files co-located with source code
- Comprehensive unit tests for game logic
- Integration tests for game flows
- When asked to run tests to verify, run `pnpm test:e2e` and check that all tests pass. If not, investigate the playwright tests (possibly using playwright MCP) to figure out what is wrong. No need to pass a custom `--timeout`
- Do not run `test:e2e` unless explicitly asked for, as it takes too long to wait on it all the time.

## Cards
- When adding new cards, make sure they are balanced with existing cards in card-definitions.ts
- The player should generally be able to play 2-3 cards per round.
- Some cards _can_ be exceptionally cheap or expensive, but most should be middle-ground cards
- Cards should be generous in using randomness (coin flip)
- Cards should be generous in adding both positive and negative effects, e.g. combining progress with adding TD